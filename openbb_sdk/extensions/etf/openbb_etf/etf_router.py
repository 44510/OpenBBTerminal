from openbb_core.app.model.command_context import CommandContext
from openbb_core.app.model.obbject import OBBject
from openbb_core.app.provider_interface import (
    ExtraParams,
    ProviderChoices,
    StandardParams,
)
from openbb_core.app.query import Query
from openbb_core.app.router import Router
from openbb_core.app.utils import basemodel_to_df
from pydantic import BaseModel

router = Router(prefix="")


# pylint: disable=unused-argument
@router.command(model="EtfSearch")
def search(
    cc: CommandContext,
    provider_choices: ProviderChoices,
    standard_params: StandardParams,
    extra_params: ExtraParams,
) -> OBBject[BaseModel]:
    """Search for ETFs. An empty query returns the full list of ETFs from the provider."""
    return OBBject(results=Query(**locals()).execute())


@router.command(model="EtfHoldings")
def holdings(
    cc: CommandContext,
    provider_choices: ProviderChoices,
    standard_params: StandardParams,
    extra_params: ExtraParams,
) -> OBBject[BaseModel]:
    """Get holdings for an ETF."""
    data = OBBject(results=Query(**locals()).execute())
    class EtfHoldings:
        """
        ETFHoldingsData
        ---------------

            Attributes
            ----------
            model: str
                The OpenBB data model.
            id: str
                Unique hash string for the request.
            fields: List
                Fields returned from the provider.
            results: List
                Serialized results.
            provider: str
                The data source.
            warnings: List
                Warnings generated by the command execution.
            metadata: Dict
                Parameter and command execution metadata.
            info: Dict
                Additional information about the daily holdings.
                Only returns when the provider is:
                ["blackrock"]

            Methods
            -------
            to_dataframe(): pd.DataFrame
                Convert the results to a Pandas DataFrame.
        """

        def __init__(self, data):
            items = list(data.__dict__.keys())
            setattr(self, "model", "EtfHoldings")
            for item in items:
                setattr(self, item, data.__dict__[item])
            if len(data.results) == 2:
                setattr(self, "info", data.results[1])
                setattr(self, "results", data.results[0])
            if hasattr(self, "chart"):
                delattr(self, "chart")
            setattr(self, "fields", sorted(self.to_dataframe().columns.to_list()))

        def __repr__(self):
            symbol = self.metadata["arguments"]["standard_params"]["symbol"]
            repr_str = (
                f"EtfHoldings(provider={self.provider.lower()}, symbol={symbol.lower()}, "
                f"fields={self.fields})"
            )
            return repr_str

        def to_dataframe(self):
            return basemodel_to_df(self.results).set_index("symbol").convert_dtypes()

    return EtfHoldings(data)
